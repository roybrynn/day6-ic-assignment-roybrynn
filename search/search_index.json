{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Example Functions This documentation site contains a detailed explanation, source code, and examples for a set of different functions. These are very simple functions that can be used in learning how to code in Python. The Functions: Below is a list of the different functions to be reviewed in this documentation. my_adder - Summation function. has_digits - Checks for digits within a string. my_thermostat - Imitates the function of a thermostat. The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework . Tutorials Tutorials is the place to start implementing these functions in Python. It covers an example use case for each function. How-To-Guide The How-To-Guide dives deeper into the types of things you can do with each function to gain experience in Python. It generally explains the parameters and the range of possible use cases for each function. Explanation The Explanation page dives deeper into the importance of functions in Python and how these example functions serve the purpose of teaching key concepts. Reference The References provide a detailed set of inputs, outputs, and source code for each function.","title":"Home"},{"location":"#welcome-to-python-example-functions","text":"This documentation site contains a detailed explanation, source code, and examples for a set of different functions. These are very simple functions that can be used in learning how to code in Python.","title":"Welcome to Python Example Functions"},{"location":"#the-functions","text":"Below is a list of the different functions to be reviewed in this documentation. my_adder - Summation function. has_digits - Checks for digits within a string. my_thermostat - Imitates the function of a thermostat. The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework .","title":"The Functions:"},{"location":"#tutorials","text":"Tutorials is the place to start implementing these functions in Python. It covers an example use case for each function.","title":"Tutorials"},{"location":"#how-to-guide","text":"The How-To-Guide dives deeper into the types of things you can do with each function to gain experience in Python. It generally explains the parameters and the range of possible use cases for each function.","title":"How-To-Guide"},{"location":"#explanation","text":"The Explanation page dives deeper into the importance of functions in Python and how these example functions serve the purpose of teaching key concepts.","title":"Explanation"},{"location":"#reference","text":"The References provide a detailed set of inputs, outputs, and source code for each function.","title":"Reference"},{"location":"adder/","text":"function to sum the 3 numbers Input: 3 numbers a, b, c Output: the sum of a, b, and c author: date: Source code in example_functions.py 4 5 6 7 8 9 10 11 12 13 14 15 16 def my_adder ( a , b , c ): \"\"\" function to sum the 3 numbers Input: 3 numbers a, b, c Output: the sum of a, b, and c author: date: \"\"\" # this is the summation out = a + b + c return out","title":"my_adder"},{"location":"digits/","text":"Checks if a string has digits in it Source code in example_functions.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def have_digits ( s ): \"\"\" Checks if a string has digits in it \"\"\" out = 0 # loop through the string for c in s : # check if the character is a digit if c . isdigit (): out = 1 break return out","title":"have_digits"},{"location":"grouped_example/","text":"Tutorials Tutorials is the place to start implementing these functions in Python. It covers an example use case for each function. To start, it is important to make sure you have Python downloaded for your computer. To download Python, visit the python.org website. Ensure that you have Visual Studio Code to run your Python code. To download VS Code, visit the code.visualstudio.com website. Once your VS Code is up and running, create a .py file in your directory. This is where you will be able to test these functions. In this same directory, add the example_functions.py file so that you will have access to the functions we have made. my_adder Here is an example to use my_adder . To start, define three numeric values a , b , and c . a = 1 b = 2 c = 3 We can pass these values to the my_adder function: ans = my_adder(a,b,c) The my_adder function adds the three values a , b , and c . This means that the expected output is 6 . To verify this, print the output of the function. print(ans) has_digits Here is an example to use has_digits . To start, define a single text string. string = \"Hi there. My favorite number is 6. What about yours?\" We can pass this value to the has_digits function: ans = has_digits(string) The has_digits function determines if there is a numeric character or not- a single boolean decision. This means that the expected output is 1 which indicates true. To verify this, print the output of the function. print(ans) my_thermostat Here is an example to use my_thermostat . To start, define two numeric values current_temperature and desired_temperature . These values correspond to the current temperature in the fake room and the desired final temperature for the thermostat to take into account. current_temperature = 50 desired_temperature = 75 We can pass these values to the my_thermostat function: ans = my_thermostat(current_temperature, desired_temperature) The my_thermostat function determines the action the 'thermostat' should take given the two temperatures. Given that the desired temperature is much larger than the current temperature, we would expect the output to show \"Heat\" . This indicates that the house should turn on the heat to get the desired temperature. print(ans)","title":"Tutorials"},{"location":"grouped_example/#tutorials","text":"Tutorials is the place to start implementing these functions in Python. It covers an example use case for each function. To start, it is important to make sure you have Python downloaded for your computer. To download Python, visit the python.org website. Ensure that you have Visual Studio Code to run your Python code. To download VS Code, visit the code.visualstudio.com website. Once your VS Code is up and running, create a .py file in your directory. This is where you will be able to test these functions. In this same directory, add the example_functions.py file so that you will have access to the functions we have made.","title":"Tutorials"},{"location":"grouped_example/#my_adder","text":"Here is an example to use my_adder . To start, define three numeric values a , b , and c . a = 1 b = 2 c = 3 We can pass these values to the my_adder function: ans = my_adder(a,b,c) The my_adder function adds the three values a , b , and c . This means that the expected output is 6 . To verify this, print the output of the function. print(ans)","title":"my_adder"},{"location":"grouped_example/#has_digits","text":"Here is an example to use has_digits . To start, define a single text string. string = \"Hi there. My favorite number is 6. What about yours?\" We can pass this value to the has_digits function: ans = has_digits(string) The has_digits function determines if there is a numeric character or not- a single boolean decision. This means that the expected output is 1 which indicates true. To verify this, print the output of the function. print(ans)","title":"has_digits"},{"location":"grouped_example/#my_thermostat","text":"Here is an example to use my_thermostat . To start, define two numeric values current_temperature and desired_temperature . These values correspond to the current temperature in the fake room and the desired final temperature for the thermostat to take into account. current_temperature = 50 desired_temperature = 75 We can pass these values to the my_thermostat function: ans = my_thermostat(current_temperature, desired_temperature) The my_thermostat function determines the action the 'thermostat' should take given the two temperatures. Given that the desired temperature is much larger than the current temperature, we would expect the output to show \"Heat\" . This indicates that the house should turn on the heat to get the desired temperature. print(ans)","title":"my_thermostat"},{"location":"parameter_explanations/","text":"How-To-Guide The How-To-Guide dives deeper into the types of things you can do with each function to gain experience in Python. It generally explains the parameters and the range of possible use cases for each function. my_adder Here is a deeper explanation of how my_adder can be used. To start, the three numeric values a , b , and c that are input to the function can be any sort of floating point or integer value. The inputs can be negative, positive, or 0. The function automatically casts inputs to float for consistency. a = float b = float c = float We can pass these values to the my_adder function: ans = my_adder(a,b,c) The my_adder function adds the three values a , b , and c . This means that the expected output is a + b + c . For further reference on summation, please visit the following link . This function can be used for anytime the programmer wants to add three numeric values. has_digits Here is a deeper explanation of how has_digits can be used. To start, the text string value string can be any input of type str . The inputs can contain spaces and utilize special characters. string = str We can pass this value to the has_digits function: ans = has_digits(string) The has_digits function uses the built-in .isdigit() function from Python. This function takes a single character and determines if the character is a digit or not and returns either 1 or 0 as a binary indicator for the precense of digits. For further reference on the .isdigit() function, please visit the following link . This function can be used for anytime the programmer wants to check for the presence of a numeric character in a string of text. my_thermostat Here is a deeper explanation of how my_thermostat can be used. To start, the two numeric values current_temperature and desired_temperature are input to the function and can be any sort of floating point or integer value. The inputs can be negative, positive, or 0. The function automatically casts inputs to float for consistency. current_temperature = float desired_temperature = float We can pass these values to the my_thermostat function: ans = my_thermostat(current_temperature,desired_temperature) The my_thermostat function determines the action the 'thermostat' should take given the two temperatures. This happens by comparing the current and desired temperatures. If the current and desired temperatures have a difference of 5 degrees or more, than the thermostat indicates an action- either \"Heat\" or \"AC\". In the case where there current and desired temperature are within 5 degrees of one another, the the function returns \"Off\". This function can be used to mimic the behavior of a thermostat and compare different temperatures.","title":"How-to-Guide"},{"location":"parameter_explanations/#how-to-guide","text":"The How-To-Guide dives deeper into the types of things you can do with each function to gain experience in Python. It generally explains the parameters and the range of possible use cases for each function.","title":"How-To-Guide"},{"location":"parameter_explanations/#my_adder","text":"Here is a deeper explanation of how my_adder can be used. To start, the three numeric values a , b , and c that are input to the function can be any sort of floating point or integer value. The inputs can be negative, positive, or 0. The function automatically casts inputs to float for consistency. a = float b = float c = float We can pass these values to the my_adder function: ans = my_adder(a,b,c) The my_adder function adds the three values a , b , and c . This means that the expected output is a + b + c . For further reference on summation, please visit the following link . This function can be used for anytime the programmer wants to add three numeric values.","title":"my_adder"},{"location":"parameter_explanations/#has_digits","text":"Here is a deeper explanation of how has_digits can be used. To start, the text string value string can be any input of type str . The inputs can contain spaces and utilize special characters. string = str We can pass this value to the has_digits function: ans = has_digits(string) The has_digits function uses the built-in .isdigit() function from Python. This function takes a single character and determines if the character is a digit or not and returns either 1 or 0 as a binary indicator for the precense of digits. For further reference on the .isdigit() function, please visit the following link . This function can be used for anytime the programmer wants to check for the presence of a numeric character in a string of text.","title":"has_digits"},{"location":"parameter_explanations/#my_thermostat","text":"Here is a deeper explanation of how my_thermostat can be used. To start, the two numeric values current_temperature and desired_temperature are input to the function and can be any sort of floating point or integer value. The inputs can be negative, positive, or 0. The function automatically casts inputs to float for consistency. current_temperature = float desired_temperature = float We can pass these values to the my_thermostat function: ans = my_thermostat(current_temperature,desired_temperature) The my_thermostat function determines the action the 'thermostat' should take given the two temperatures. This happens by comparing the current and desired temperatures. If the current and desired temperatures have a difference of 5 degrees or more, than the thermostat indicates an action- either \"Heat\" or \"AC\". In the case where there current and desired temperature are within 5 degrees of one another, the the function returns \"Off\". This function can be used to mimic the behavior of a thermostat and compare different temperatures.","title":"my_thermostat"},{"location":"thermostat/","text":"Changes the status of the thermostat based on temperature and desired temperature author date :type temp: Int :type desiredTemp: Int :rtype: String Source code in example_functions.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def my_thermo_stat ( temp , desired_temp ): \"\"\" Changes the status of the thermostat based on temperature and desired temperature author date :type temp: Int :type desiredTemp: Int :rtype: String \"\"\" if temp < desired_temp - 5 : status = \"Heat\" elif temp > desired_temp + 5 : status = \"AC\" else : status = \"off\" return status","title":"my_thermo_stat"},{"location":"why_do_we_need_functions/","text":"Explanation The Explanation page dives deeper into the importance of functions in Python and how these example functions serve the purpose of teaching key concepts. Functions are extremely important to developing Python code. Even simple examples\u2014like my_adder \u2014teach key concepts: Reusability: Functions can be called multiple times without needing to rewrite entire paragraphs of code. Readability: Functions reduce repeated lines of code, and the name defines a clear use of the function Organization: Functions break programs into pieces, each with a set purpose. Starting with simple cases like the functions in this repository ensures beginners understand the structure of functions (def, parameters, return values) before creating more complicated pieces of code. For more information of the importance of functions, please refer to this article .","title":"Explanation"},{"location":"why_do_we_need_functions/#explanation","text":"The Explanation page dives deeper into the importance of functions in Python and how these example functions serve the purpose of teaching key concepts. Functions are extremely important to developing Python code. Even simple examples\u2014like my_adder \u2014teach key concepts: Reusability: Functions can be called multiple times without needing to rewrite entire paragraphs of code. Readability: Functions reduce repeated lines of code, and the name defines a clear use of the function Organization: Functions break programs into pieces, each with a set purpose. Starting with simple cases like the functions in this repository ensures beginners understand the structure of functions (def, parameters, return values) before creating more complicated pieces of code. For more information of the importance of functions, please refer to this article .","title":"Explanation"}]}